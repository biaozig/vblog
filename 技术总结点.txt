1. 虚拟 vdom ：
        在浏览器里一次次修改dom 是非常消耗性能的，有时候会出现卡顿现象,所以为了减少对dom 的操作，有了vdom; 虚拟dom 就是将	        dom 的对比放在了js 层，通过对比不同之处来选择新渲染的dom节点，从来提高渲染效率。
2. js中 call, apply, bind 的用法：
        var name = '小王', age = 17;
        var obj = {
    	name: '小张'，
	objAge: this.age,
	myFun: function(fm, t){
	       console.log(this.name + '年龄' + this.age,  ' 来自 ' + fm + ' 去往 ' + t)
	}
        }
        var db = {
	name: '好大声',
	age:99
        }
	obj.myFun.call(db,'成都','上海')；　　  // 德玛 年龄 99  来自 成都去往上海
	obj.myFun.apply(db,['成都','上海']);      // 德玛 年龄 99  来自 成都去往上海  
	obj.myFun.bind(db,'成都','上海')();       // 德玛 年龄 99  来自 成都去往上海
	obj.myFun.bind(db,['成都','上海'])();　  // 德玛 年龄 99  来自 成都, 上海去往 undefined
         2.1   all 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：
         2.2   call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。
         2.3   apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。
         2.4   bind 除了返回是函数以外，它 的参数和 call 一样。
    当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！
3.js 闭包的理解
       3.1 作用域链理解
	js的作用域分两种，全局和局部，基于作用域链相关的知识，在js作用域环境中访问变量是由内向外的，内部作用域可以获得当前              作用域和包含当前作用域的外层作用域下的变量；
	也就是说在外层作用域下无法获取内层作用域下的变量，在不同的函数作用域中是不能相互访问彼此变量的；那么我们想在一个               函数内部也有限权访问另一个函数内部的变量该怎么办呢？闭包就是用来解决这一需求的，闭包的本质就是在一个函数内部创建另             一个函数。
       3.2 闭包有3个特性：
	①函数嵌套函数
	②函数内部可以引用函数外部的参数和变量
	③参数和变量不会被垃圾回收机制回收
       3.3 闭包的好处与坏处
	好处
	①保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突
	②在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）
	③匿名自执行函数可以减少内存消耗

	坏处
	①其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成内存泄漏，解决方法是可以在使用完	        变量后手动为它赋值为null；
	②其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量         ，来减轻对执行速度的影响。

4.JSBridge 的通信原理	
	


